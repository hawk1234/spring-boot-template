#This is properties template if you don't intend to modify anything this file is unnecessary. Syntax ${<SYSTEM_VARIABLE_IF_PRESENT>:<DEFAULT_VALUE>}
spring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES=true
spring.jackson.parser.STRICT_DUPLICATE_DETECTION=true
spring.main.banner-mode=log
spring.mvc.servlet.load-on-startup=1
server.port=${SERVER_PORT:8080}
#Recomended to be between 2x - 4x number of threads of the machine where you are running application
server.tomcat.max-threads=${MAX_TOMCAT_THREADS:8}

#spring.jpa.database-platform=${DATABASE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
#Not used but keep does settings so that sql is nicely logged when DB support will be added
spring.jpa.properties.hibernate.use_sql_comments=${USE_SQL_COMMENTS:true}
spring.jpa.properties.hibernate.format_sql=${FORMAT_SQL:true}

com.mz.example.adminpass=${ADMIN_PASS:jD59ZBmE0jiZ8Y8M}
com.mz.example.userpass=${USER_PASS:psSdTlJl94qBaqqQ}

#Specify coma separated domains from witch calls can be made to this API. Validation based on CORS not 100% secure.
#* can be specified to indicate calls allowed from any domain. If not specified CORS calls are not allowed.
#eg.: http://domain1.com,http://domain2.com
com.mz.example.allowedOrigins=${ALLOWED_ORIGINS:}

logging.config=${LOG_CONFIG:file:config/log4j2.xml}

#Configure collecting statistics for example - see http://micrometer.io/docs/registry/influx
#Enable only /actuator/health endpoint for application - statistics will be gathered in influxDB
management.endpoints.web.exposure.include=health
#Collect only statistics for controllers/methods annotated with @Timed
management.metrics.web.server.auto-time-requests=false
management.metrics.export.influx.enabled=${STATS_ENABLED:false}
management.metrics.export.influx.uri=${STATS_INFLUX_URL:http://localhost:8086}
#Determines whether database can be created if it does not exist
management.metrics.export.influx.auto-create-db=${STATS_INFLUX_AUTO_CREATE_DB:false}
management.metrics.export.influx.db=${STATS_INFLUX_DB:application_monitoring}
management.metrics.export.influx.retention-policy=${STATS_INFLUX_RP:}
management.metrics.export.influx.user=${STATS_INFLUX_USER:}
management.metrics.export.influx.password=${STATS_INFLUX_PASS:}
#Reporting frequency
management.metrics.export.influx.step=${STATS_INFLUX_FREQUENCY:5s}
#Max number of observations committed in one call
management.metrics.export.influx.batch-size=${STATS_INFLUX_BATCH_SIZE:10000}
