buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorPluginVersion")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.asciidoctor.convert"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: "spring-boot-starter-logging"
}

dependencies {
    //spring boot
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")

    //statistics dependencies
    compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    compile("io.micrometer:micrometer-registry-influx:$influxMicrometerVersion")

    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testCompile("org.springframework.restdocs:spring-restdocs-restassured:$springRestdocsVersion")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:$springRestdocsVersion")
    testCompile("org.springframework.security:spring-security-test:$springSecurityTestVersion")
    testCompile("io.rest-assured:rest-assured:$restAssuredVersion")
    testCompile("junit:junit:$junitVersion")
}

task zipPackage(type: Zip){
    from "${buildDir}/libs"
    include '**/*'
    archiveName "${rootProject.name}-${version}.zip"
    destinationDir(file("${buildDir}/dist"))
}

task copyConfiguration(type: Copy){
    from ('src/main/config'){
        include '*'
    }
    into "${buildDir}/libs/config"
    finalizedBy zipPackage
}

task copyProperties(type: Copy){
    from ('src/main/resources'){
        include 'application.properties'
    }
    into "${buildDir}/libs/config"
    finalizedBy copyConfiguration
}

ext {
    snippets = "build/asciidoc-snippets"//If you want to change - snippets dir change this variable
}

test {
	maxHeapSize = "1024m"
    systemProperty "asciidoc_snippets", snippets
    finalizedBy asciidoctor
}

asciidoctor {
    sourceDir 'src/docs/asciidoc'
    sources {
        include 'index.adoc'
    }
    attributes \
        "snippets": file(snippets),
        "application_version": version,
        "title": "TODO: API DOC TITLE",
        "company_name": "TODO: COMPANY NAME",
        "company_web_site": "TODO: COMPANY WEBSITE",
        "contact_support": "TODO: COMPANY_SUPPORT_CONTACT"
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    from ("src/main/resources/static") {
        into 'static'
    }
    finalizedBy copyProperties
}
